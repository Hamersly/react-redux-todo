{"version":3,"sources":["components/Title/Title.styles.js","components/Title/Title.jsx","components/List/List.styles.js","components/Input/Input.styles.js","store/todo/types.js","components/Input/Input.jsx","store/todo/actions.js","components/DataBlock/DateBlock.styles.js","components/DataBlock/DateBlock.jsx","components/TaskChanger/TaskChanger.styles.js","components/TaskChanger/TaskChanger.jsx","components/TaskWrapper/TaskWrapper.styles.js","components/TaskWrapper/TaskWrapper.jsx","components/Task/Task.styles.js","components/Task/Task.jsx","components/FilterBlock/FilterBlock.styles.js","components/FilterBlock/FilterBlock.jsx","components/RemoveTasksBlock/RemoveTasksBlock.styles.js","components/RemoveTasksBlock/RemoveTasksBlock.jsx","components/List/List.jsx","App.js","store/todo/reducers.js","store/rootReducer.js","store/store.js","index.js"],"names":["StyledTitle","styled","h1","Title","ListWrapper","div","TasksList","MyButton","button","InputBlock","StyledInput","input","AddButton","ADD_TASK","REMOVE_ALL_TASKS","REMOVE_TASK","CHANGE_TASK","FILTER_ALL","FILTER_IS_COMPLETED","FILTER_IS_NOT_COMPLETED","Input","useState","text","setText","dispatch","useDispatch","addTodoInList","trim","length","type","addTask","value","onChange","e","target","onKeyDown","key","placeholder","onClick","Block","Date","h3","RemoveButton","ChangeButton","props","change","DateBlock","task","changeValueTodo","date","id","Changer","SaveButton","ChangeText","textarea","TaskChanger","changeTodo","defaultValue","wrap","rows","Wrapper","TaskText","Completed","TaskWrapper","isCompleted","TaskBlock","Task","changeTask","Filters","CompletedFilterButton","Color","AllFilterButton","IsNotCompletedFilterButton","FilterBlock","flag","useSelector","state","todos","RemoveTasksButton","RemBlock","RemoveTasksBlock","taskList","sortedList","List","todoList","useEffect","localStorage","clear","setItem","JSON","stringify","map","item","App","className","getInitialState","localTodo","parse","getItem","todoFilter","arr","filter","rootReducer","combineReducers","action","todo","getTime","toLocaleString","addValue","removeTaskValue","changeTaskValue","store","createStore","compose","window","devToolsExtension","f","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.02445188.chunk.js","sourcesContent":["import styled from \"styled-components\";\n\nexport const StyledTitle = styled.h1`\n    font-famili: \"Roboto\", sans-serif;\n    font-weight: 700;\n    font-size: 3rem;\n    text-align: center;\n    margin-top 30px;\n    color: #A9A9A9;\n    text-shadow: 5px 5px 10px black;\n`;\n","import {StyledTitle} from \"./Title.styles\";\n\nexport const Title = () => {\n  return <StyledTitle>Todo list</StyledTitle>;\n};\n","import styled from \"styled-components\";\n\nexport const ListWrapper = styled.div``;\nexport const TasksList = styled.div``;\n\n\nexport const MyButton = styled.button`\n  display: flex;\n  justify-content: center;\n  padding: 5px 15px;\n  font-size: 20px;\n  background: transparent;\n  background-color: orange;\n  box-shadow: 0 0 10px 2px black;\n  border: none;\n  border-radius: 50px;\n`;\n\n\n\n","import styled from \"styled-components\";\nimport {MyButton} from \"../List/List.styles\";\n\nexport const InputBlock = styled.div`\n    display: flex;\n      \n`;\n\nexport const StyledInput = styled.input`\n    width: 100%;\n    padding: 10px 15px;\n    margin-top: 30px;\n    border-radius: 30px;\n    box-shadow: 0 0 10px 5px black;\n    outline: none;\n`;\n\nexport const AddButton = styled(MyButton)`\n    margin: 30px auto 0 10px;\n`;\n","export const ADD_TASK = 'ADD_TASK'\nexport const REMOVE_ALL_TASKS = 'REMOVE_ALL_TASKS'\nexport const REMOVE_TASK = 'REMOVE_TASK'\nexport const CHANGE_TASK = 'CHANGE_TASK'\nexport const FILTER_ALL = 'FILTER_ALL'\nexport const FILTER_IS_COMPLETED = 'FILTER_IS_COMPLETED'\nexport const FILTER_IS_NOT_COMPLETED = 'FILTER_IS_NOT_COMPLETED'","import {useState} from \"react\";\nimport {AddButton, InputBlock, StyledInput} from \"./Input.styles\";\nimport {useDispatch} from \"react-redux\";\nimport {addTask} from \"../../store/todo/actions\";\n\nexport const Input = () => {\n  const [text, setText] = useState(\"\");\n  const dispatch = useDispatch()\n\n  const addTodoInList = () => {\n    if (text.trim().length) {\n      dispatch(addTask(text))\n      setText(\"\");\n    }\n  };\n\n  const handleSubmit = (e) => {\n    if (e.key === \"Enter\") {\n      addTodoInList();\n    }\n  };\n\n  return (\n    <InputBlock>\n      <StyledInput\n        type=\"text\"\n        value={text}\n        onChange={(e) => setText(e.target.value)}\n        onKeyDown={handleSubmit}\n        placeholder=\"Введи задачу\"\n      />\n      <AddButton onClick={addTodoInList}><h3>+</h3></AddButton>\n    </InputBlock>\n  );\n};\n","import {\n  ADD_TASK,\n  CHANGE_TASK,\n  FILTER_ALL,\n  FILTER_IS_COMPLETED,\n  FILTER_IS_NOT_COMPLETED,\n  REMOVE_ALL_TASKS,\n  REMOVE_TASK\n} from \"./types\";\n\nexport const addTask = (text) => ({\n  type: ADD_TASK,\n  text,\n});\n\nexport const changeTask = (id, value, text) => ({\n  type: CHANGE_TASK,\n  id,\n  value,\n  text\n})\n\nexport const removeTask = (id) => ({\n  type: REMOVE_TASK,\n  id\n})\n\nexport const removeAllTask = () => ({\n  type: REMOVE_ALL_TASKS\n})\n\nexport const filterAll = () => ({\n  type: FILTER_ALL\n})\n\nexport const filterIsCompleted = () => ({\n  type: FILTER_IS_COMPLETED\n})\n\nexport const filterIsNotCompleted = () => ({\n  type: FILTER_IS_NOT_COMPLETED\n})\n\n","import styled from \"styled-components\";\n\nexport const Block = styled.div`\n  display: flex;\n  justify-content: space-between;\n`;\n\nexport const Date = styled.h3`\n  color: orange;\n  margin: 15px 0 5px 15px;\n  width: auto;\n  text-shadow: 1px 1px 2px black;\n`;\n\nexport const RemoveButton = styled.button`\n  background-color: orange;\n  border: none;\n  padding: 5px 10px;\n  margin: 15px 15px 0 0;\n  box-shadow: 0 0 10px 3px black;\n  border-radius: 50px;\n`;\n\nexport const ChangeButton = styled(RemoveButton)`\n  background-color: ${(props) => props.change && 'red'};\n`;","import {Block, ChangeButton, Date, RemoveButton} from \"./DateBlock.styles\";\nimport {useDispatch} from \"react-redux\";\nimport {removeTask} from \"../../store/todo/actions\";\n\nexport const DateBlock = ({task, changeValueTodo}) => {\n  const dispatch = useDispatch()\n\n  return (\n    <Block>\n      <Date>{task.date}</Date>\n      <div>\n        <ChangeButton\n          onClick={() => changeValueTodo(task.id, 'change')}\n          change={task.change}>ред.\n        </ChangeButton>\n        <RemoveButton onClick={() => dispatch(removeTask(task.id))}>X</RemoveButton>\n      </div>\n    </Block>\n  )\n}\n","import styled from \"styled-components\";\nimport {RemoveButton} from \"../DataBlock/DateBlock.styles\";\n\nexport const Changer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding: 0 0 15px 0;\n`;\n\nexport const SaveButton = styled(RemoveButton)`\n  margin: 15px 0 0 0;;\n`;\n\nexport const ChangeText = styled.textarea`\n  margin: 15px 15px 0 15px;\n  padding: 5px;\n  background-color: #a9a9a9;\n  width: 95%;\n  color: black;\n  border: none;\n  resize: none;\n`;","import {Changer, ChangeText, SaveButton} from \"./TaskChanger.styles\";\n\nexport const TaskChanger = ({changeTodo, task, setText}) => (\n  <Changer>\n    <ChangeText\n      defaultValue={task.text}\n      onChange={(e) => setText(e.target.value)}\n      type=\"text\"\n      wrap=\"hard\"\n      rows=\"3\"\n    />\n    <SaveButton onClick={changeTodo}>Сохранить</SaveButton>\n  </Changer>\n);\n","import styled from \"styled-components\";\n\nexport const Wrapper = styled.div`\n  display: flex;\n  padding: 15px;\n  justify-content: space-between;\n  align-items: center;\n`;\n\nexport const TaskText = styled.h3`\n  text-decoration: ${(props) => props.Completed && 'line-through'};\n  word-break: break-word;\n  white-space: pre-line;\n  hyphens: auto;\n`;","import {TaskText, Wrapper} from \"./TaskWrapper.styles\";\n\nexport const TaskWrapper = ({task, changeValueTodo}) => {\n\n  return (\n    <Wrapper onClick={() => changeValueTodo(task.id, 'isCompleted')}>\n        <TaskText Completed={task.isCompleted}>\n          {task.text}\n        </TaskText>\n    </Wrapper>\n  );\n}","import styled from \"styled-components\";\n\nexport const TaskBlock = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: space-around;\n  margin: 0 0 30px 0;\n  box-shadow: 0 0 10px 5px black;\n  background-color: #a9a9a9;\n  border-radius: 30px;\n`;\n\n\n\n","import {useState} from \"react\";\nimport {DateBlock} from \"../DataBlock/DateBlock\";\nimport {TaskChanger} from \"../TaskChanger/TaskChanger\";\nimport {TaskWrapper} from \"../TaskWrapper/TaskWrapper\";\nimport {\n  TaskBlock,\n} from \"./Task.styles\";\nimport {useDispatch} from \"react-redux\";\nimport {changeTask} from \"../../store/todo/actions\";\n\nexport const Task = ({task}) => {\n  const [text, setText] = useState(task.text);\n  const dispatch = useDispatch()\n\n  const changeValueTodo = (id, value, text) => {\n    dispatch(changeTask(id, value, text))\n  };\n\n  const changeTodo = () => {\n    if (text.trim().length) {\n      changeValueTodo(task.id, 'change', text);\n      setText(\"\");\n    }\n  };\n\n  return (\n    <TaskBlock>\n\n      <DateBlock\n        task={task}\n        changeValueTodo={changeValueTodo}>\n      </DateBlock>\n\n      {task.change ?\n        (<TaskChanger\n          changeTodo={changeTodo}\n          task={task}\n          setText={setText}>\n        </TaskChanger>) :\n\n        (<TaskWrapper\n          onClick={() => changeValueTodo(task.id, 'isCompleted')}\n          task={task}\n          changeValueTodo={changeValueTodo}>\n        </TaskWrapper>)}\n\n    </TaskBlock>\n  );\n};\n","import styled from \"styled-components\";\nimport {MyButton} from \"../List/List.styles\";\n\nexport const Filters = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nexport const CompletedFilterButton = styled(MyButton)`\n  margin: 30px 10px;\n  background-color: ${(props) => props.Color === \"FILTER_IS_COMPLETED\" && \"red\"} ;\n`;\n\nexport const AllFilterButton = styled(MyButton)`\n  margin: 30px 10px;\n  background-color: ${(props) => props.Color === \"FILTER_ALL\" && \"red\"} ;\n`;\n\nexport const IsNotCompletedFilterButton = styled(MyButton)`\n  margin: 30px 10px;\n  background-color: ${(props) => props.Color === \"FILTER_IS_NOT_COMPLETED\" && \"red\"} ;\n`;","import {filterAll, filterIsCompleted, filterIsNotCompleted} from \"../../store/todo/actions\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AllFilterButton, CompletedFilterButton, Filters, IsNotCompletedFilterButton} from \"./FilterBlock.styles\";\n\nexport const FilterBlock = () => {\n  const flag = useSelector((state) => state.todos.flag)\n  const dispatch = useDispatch()\n\n  return (\n    <Filters>\n      <CompletedFilterButton\n        onClick={() => dispatch(filterIsCompleted())}\n        Color={flag}>\n        Сделано\n      </CompletedFilterButton>\n\n      <AllFilterButton\n        onClick={() => dispatch(filterAll())}\n        Color={flag}>\n        Всё\n      </AllFilterButton>\n\n      <IsNotCompletedFilterButton\n        onClick={() => dispatch(filterIsNotCompleted())}\n        Color={flag}>\n        Ожидает\n      </IsNotCompletedFilterButton>\n    </Filters>\n  )\n};","import styled from \"styled-components\";\nimport {MyButton} from \"../List/List.styles\";\n\nexport const RemoveTasksButton = styled(MyButton)`\n  margin-bottom: 30px;\n`;\n\nexport const RemBlock = styled.div`\n  display: flex;\n  justify-content: center;\n  margin-top: 30px;\n`;","import {removeAllTask} from \"../../store/todo/actions\";\nimport {RemBlock, RemoveTasksButton} from \"./RemoveTasksBlock.styles\";\nimport {useDispatch, useSelector} from \"react-redux\";\n\nexport const RemoveTasksBlock = () => {\n  const taskList = useSelector((state) => state.todos.sortedList)\n  const dispatch = useDispatch()\n\n  return (\n    <RemBlock>\n      {taskList.length > 1 &&\n        <RemoveTasksButton onClick={() => dispatch(removeAllTask())}>\n          Удалить всё\n        </RemoveTasksButton>\n      }\n    </RemBlock>\n  )\n};","import {useEffect} from \"react\";\nimport {ListWrapper, TasksList} from \"./List.styles\";\nimport {Input} from \"../Input/Input\";\nimport {Task} from \"../Task/Task\";\nimport {FilterBlock} from \"../FilterBlock/FilterBlock\";\nimport {RemoveTasksBlock} from \"../RemoveTasksBlock/RemoveTasksBlock\";\nimport {useSelector} from \"react-redux\";\n\nexport const List = () => {\n  const todos = useSelector((state) => state.todos)\n  const todoList = todos.sortedList\n\n  useEffect(() => {\n    localStorage.clear();\n    localStorage.setItem(\"todos\", JSON.stringify(todos));\n  });\n\n  return (\n    <ListWrapper>\n      <Input />\n      <FilterBlock/>\n      <TasksList>\n        {todoList.map((item) => (\n          <Task\n            task={item}\n            key={item.id}\n          />\n        ))}\n      </TasksList>\n      <RemoveTasksBlock />\n    </ListWrapper>\n  );\n};\n","import {Title} from \"./components/Title/Title\";\nimport {List} from \"./components/List/List\";\n\nexport const App = () => {\n  return (\n    <div className=\"App\">\n      <Title/>\n      <List/>\n    </div>\n  );\n}\n","import {\n  ADD_TASK,\n  CHANGE_TASK,\n  FILTER_ALL,\n  FILTER_IS_COMPLETED,\n  FILTER_IS_NOT_COMPLETED,\n  REMOVE_ALL_TASKS,\n  REMOVE_TASK\n} from './types';\n\nconst getInitialState = () => {\n  const localTodo = JSON.parse(localStorage.getItem(\"todos\"));\n  if (!localTodo) {\n    return {\n      todoList: [],\n      sortedList: [],\n      flag: FILTER_ALL\n    };\n  }\n  return localTodo;\n};\n\nconst todoFilter = (flag, arr) => {\n  switch (flag) {\n    case \"FILTER_ALL\":\n      return  arr\n    case \"FILTER_IS_COMPLETED\":\n      return arr.filter((task) => task.isCompleted)\n    case \"FILTER_IS_NOT_COMPLETED\":\n      return arr.filter((task) => !task.isCompleted)\n    default:\n      return arr\n  }\n}\n\nexport const todoReducer = (state = getInitialState(), action) => {\n  switch (action.type) {\n\n    case ADD_TASK:\n      const todo = {\n        id: new Date().getTime(),\n        date: new Date().toLocaleString(),\n        text: action.text,\n        isCompleted: false,\n        change: false,\n      }\n      const addValue = [...state.todoList, todo]\n      return {\n        ...state,\n        todoList: addValue,\n        sortedList: todoFilter(state.flag, addValue)\n      }\n\n    case REMOVE_ALL_TASKS:\n      return {\n        ...state,\n        todoList: [],\n        sortedList: [],\n      }\n\n    case REMOVE_TASK:\n      const removeTaskValue = state.todoList.filter((task) => task.id !== action.id)\n      return {\n        ...state,\n        todoList: removeTaskValue,\n        sortedList: todoFilter(state.flag, removeTaskValue)\n      }\n\n    case CHANGE_TASK:\n      const changeTaskValue = state.todoList.map((task) => {\n          if (task.id === action.id && action.text) {\n            return {...task, [action.value]: !task[action.value], text: action.text}\n          } else if (task.id === action.id) {\n            return {...task, [action.value]: !task[action.value]}\n          } else {\n            return {...task}\n          }\n        }\n      )\n      return {\n        ...state,\n        todoList: changeTaskValue,\n        sortedList:todoFilter(state.flag, changeTaskValue)\n      }\n\n    case FILTER_ALL:\n      return {\n        ...state,\n        sortedList: state.todoList,\n        flag: action.type\n      }\n\n    case FILTER_IS_COMPLETED:\n      return {\n        ...state,\n        sortedList: state.todoList.filter((task) => task.isCompleted),\n        flag: action.type\n      }\n\n    case FILTER_IS_NOT_COMPLETED:\n      return {\n        ...state,\n        sortedList: state.todoList.filter((task) => !task.isCompleted),\n        flag: action.type\n      }\n\n    default:\n      return state\n  }\n}\n\n\n","import {combineReducers} from \"redux\";\nimport {todoReducer} from \"./todo/reducers\";\n\nexport const rootReducer = combineReducers({\n  todos: todoReducer,\n});","import {compose, createStore} from 'redux';\nimport {rootReducer} from \"./rootReducer\";\n\nexport const store = createStore(\n  rootReducer,\n  compose(window.devToolsExtension ? window.devToolsExtension() : (f) => f)\n);\n\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport {App} from \"./App\";\nimport {Provider} from 'react-redux';\nimport {store} from \"./store/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App/>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}