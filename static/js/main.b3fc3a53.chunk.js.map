{"version":3,"sources":["components/Title/Title.styles.js","components/Title/Title.jsx","components/List/List.styles.js","components/Input/Input.styles.js","components/Input/Input.jsx","components/Task/Task.styles.js","components/Task/Task.jsx","store/actions.js","components/List/List.jsx","App.js","store/reducers.js","store/store.js","index.js"],"names":["StyledTitle","styled","h1","Title","props","ListWrapper","div","TasksList","FilterBlock","MyButton","button","FilterButton","RemoveTasksButton","RemoveTasksBlock","InputBlock","StyledInput","input","AddButton","Input","addTodo","useState","value","setValue","addTodoInList","trim","length","type","onChange","e","target","onKeyDown","key","placeholder","onClick","TaskWrapper","TaskBlock","TaskChanger","DateBlock","Date","h3","RemoveButton","ChangeButton","Color","SaveButton","TaskText","Completed","ChangeText","textarea","Task","task","removeTodo","ChangeValueTodo","text","date","change","id","defaultValue","wrap","rows","isCompleted","ADD_TASK","REMOVE_ALL_TASKS","REMOVE_TASK","CHANGE_TASK","FILTER_ALL_TASKS","FILTER_IS_COMPLETED_TASKS","List","todoList","useSelector","state","todoReducer","dispatch","useDispatch","useEffect","localStorage","clear","setItem","JSON","stringify","removeTask","changeTask","removeAll","filterTodo","status","filter","todo","addTask","map","item","App","className","loadingFromLocalStorage","localTodo","parse","getItem","newTodo","getTime","toLocaleString","rootReducer","combineReducers","action","store","createStore","compose","window","devToolsExtension","f","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b3fc3a53.chunk.js","sourcesContent":["import styled from \"styled-components\";\n\nexport const StyledTitle = styled.h1`\n    font-famili: \"Roboto\", sans-serif;\n    font-weight: 700;\n    font-size: 3rem;\n    text-align: center;\n    margin-top 30px;\n    color: #A9A9A9;\n    text-shadow: 5px 5px 10px black;\n`;\n","import React from \"react\";\nimport {StyledTitle} from \"./Title.styles\";\n\nexport const Title = (props) => {\n  return <StyledTitle>Todo list</StyledTitle>;\n};\n","import styled from \"styled-components\";\n\nexport const ListWrapper = styled.div``;\nexport const TasksList = styled.div``;\nexport const FilterBlock = styled.div`\n  display: flex;\n  justify-content: center;\n`;\n\nexport const MyButton = styled.button`\n  padding: 5px 15px;\n  font-size: 20px;\n  background: transparent;\n  background-color: orange;\n  box-shadow: 0 0 10px 2px black;\n  border: none;\n  border-radius: 50px;\n`;\n\nexport const FilterButton = styled(MyButton)`\n  margin: 30px 30px 0 30px ;\n`;\n\nexport const RemoveTasksButton = styled(MyButton)`\n  margin-bottom: 30px;\n`;\n\nexport const RemoveTasksBlock = styled.div`\n  display: flex;\n  justify-content: center;\n  margin-top: 30px;\n`;\n","import styled from \"styled-components\";\nimport {MyButton} from \"../List/List.styles\";\n\nexport const InputBlock = styled.div`\n    display: flex;\n    \n`;\n\nexport const StyledInput = styled.input`\n    width: 100%;\n    padding: 10px 15px;\n    margin-top: 30px;\n    border-radius: 30px;\n    box-shadow: 0 0 10px 5px black;\n    outline: none;\n`;\n\nexport const AddButton = styled(MyButton)`\n    margin: 30px auto 0 10px;\n`;\n","import React, {useState} from \"react\";\nimport {AddButton, InputBlock, StyledInput} from \"./Input.styles\";\n\nexport const Input = ({addTodo}) => {\n  const [value, setValue] = useState(\"\");\n\n  const addTodoInList = () => {\n    if (value.trim().length !== 0) {\n      addTodo(value.trim());\n      setValue(\"\");\n    }\n  };\n\n  const handleSubmit = (e) => {\n    if (e.key === \"Enter\") {\n      addTodoInList();\n    }\n  };\n\n  return (\n    <InputBlock>\n      <StyledInput\n        type=\"text\"\n        value={value}\n        onChange={(e) => setValue(e.target.value)}\n        onKeyDown={handleSubmit}\n        placeholder=\"Введи задачу\"\n      />\n      <AddButton onClick={addTodoInList}><h3>+</h3></AddButton>\n    </InputBlock>\n  );\n};\n","import styled from \"styled-components\";\n\nexport const TaskWrapper = styled.div`\n  display: flex;\n  padding: 15px;\n  // margin: 5px 0;\n  justify-content: space-between;\n  align-items: center;\n`;\n\nexport const TaskBlock = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: space-around;\n  margin: 30px 0 0 0;\n  box-shadow: 0 0 10px 5px black;\n  background-color: #a9a9a9;\n  border-radius: 30px;\n`;\n\nexport const TaskChanger = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding: 0 0 15px 0;\n`;\n\nexport const DateBlock = styled.div`\n  display: flex;\n  justify-content: space-between;\n`;\n\nexport const Date = styled.h3`\n  color: orange;\n  margin: 15px 0 5px 15px;\n  width: auto;\n  text-shadow: 1px 1px 2px black;\n`;\n\nexport const RemoveButton = styled.button`\n  background-color: orange;\n  border: none;\n  padding: 5px 10px;\n  margin: 15px 15px 0 0;\n  box-shadow: 0 0 10px 3px black;\n  border-radius: 50px;\n`;\n\nexport const ChangeButton = styled(RemoveButton)`\n  ${(props) => props.Color};\n`;\n\nexport const SaveButton = styled(RemoveButton)`\n  margin: 15px 0 0 0;;\n`;\n\nexport const TaskText = styled.h3`\n  ${(props) => props.Completed};\n  word-break: break-word;\n  hyphens: auto;\n`;\n\nexport const ChangeText = styled.textarea`\n  margin: 15px 15px 0 15px;\n  padding: 5px;\n  background-color: #a9a9a9;\n  width: 95%;\n  color: black;\n  border: none;\n  resize: none;\n`;\n","import React, {useState} from \"react\";\nimport {\n  ChangeButton,\n  ChangeText,\n  Date,\n  DateBlock,\n  RemoveButton,\n  SaveButton,\n  TaskBlock,\n  TaskChanger,\n  TaskText,\n  TaskWrapper,\n} from \"./Task.styles\";\n\nexport const Task = ({\n                       task,\n                       removeTodo,\n                       ChangeValueTodo\n                     }) => {\n  const [value, setValue] = useState(task.text);\n\n  const changeTodo = () => {\n    if (value.trim().length !== 0) {\n      ChangeValueTodo(task.id, 'change', value.trim());\n      setValue(\"\");\n    }\n  };\n\n  return (\n    <TaskBlock>\n      <DateBlock>\n        <Date>{task.date}</Date>\n        <div>\n          {task.change ? (\n            <ChangeButton\n              onClick={() => ChangeValueTodo(task.id, 'change')}\n              Color={\"background-color: red;\"}\n            >\n              ред.\n            </ChangeButton>\n          ) : (\n            <ChangeButton onClick={() => ChangeValueTodo(task.id, 'change')}>\n              ред.\n            </ChangeButton>\n          )}\n\n          <RemoveButton onClick={() => removeTodo(task.id)}>\n            x\n          </RemoveButton>\n        </div>\n      </DateBlock>\n\n      {task.change ? (\n        <TaskChanger>\n          <ChangeText\n            defaultValue={task.text}\n            onChange={(e) => setValue(e.target.value)}\n            type=\"text\"\n            wrap=\"hard\"\n            rows=\"3\"\n          />\n          <SaveButton onClick={changeTodo}>Сохранить</SaveButton>\n        </TaskChanger>\n      ) : (\n        <TaskWrapper onClick={() => ChangeValueTodo(task.id, 'isCompleted')}>\n          {task.isCompleted ? (\n            <TaskText Completed={\"text-decoration: line-through;\"}>\n              {task.text}\n            </TaskText>\n          ) : (\n            <TaskText>{task.text}</TaskText>\n          )}\n        </TaskWrapper>\n      )}\n    </TaskBlock>\n  );\n};\n","export const ADD_TASK = 'ADD_TASK'\nexport const REMOVE_ALL_TASKS = 'REMOVE_ALL_TASKS'\nexport const REMOVE_TASK = 'REMOVE_TASK'\nexport const CHANGE_TASK = 'CHANGE_TASK'\nexport const FILTER_ALL_TASKS = 'FILTER_ALL_TASKS'\nexport const FILTER_IS_COMPLETED_TASKS = 'FILTER_IS_COMPLETED_TASKS'\nexport const FILTER_IS_NOT_COMPLETED_TASKS = 'FILTER_IS_NOT_COMPLETED_TASKS'\n\n\nexport const addTask = (text) => ({\n  type: ADD_TASK,\n  text,\n});\n\nexport const changeTask = (id, value, text) => ({\n  type: CHANGE_TASK,\n  id,\n  value,\n  text\n})\n\nexport const removeTask = (id) => ({\n  type: REMOVE_TASK,\n  id\n})\n\nexport const removeAllTask = () => ({\n  type: REMOVE_ALL_TASKS\n})\n\nexport const filterAllTasks = () => ({\n  type: FILTER_ALL_TASKS\n})\n\nexport const filterIsCompletedTaks = () => ({\n  type: FILTER_IS_COMPLETED_TASKS\n})\n\nexport const filterIsNotCompletedTaks = () => ({\n  type: FILTER_IS_NOT_COMPLETED_TASKS\n})\n\n","import React, {useEffect} from \"react\";\nimport {FilterBlock, FilterButton, ListWrapper, RemoveTasksBlock, RemoveTasksButton, TasksList} from \"./List.styles\";\nimport {Input} from \"../Input/Input\";\nimport {Task} from \"../Task/Task\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {addTask, changeTask, removeAllTask, removeTask} from \"../../store/actions\";\n\nexport const List = () => {\n  const todoList = useSelector((state) => state.todoReducer.todoList)\n  const dispatch = useDispatch()\n\n  useEffect(() => {\n    localStorage.clear();\n    localStorage.setItem(\"todoList\", JSON.stringify(todoList));\n  });\n\n  const addTodo = (text) => {\n    dispatch(addTask(text))\n  };\n\n  const removeTodo = (id) => {\n    dispatch(removeTask(id))\n  };\n\n  const ChangeValueTodo = (id, value, text) => {\n    dispatch(changeTask(id, value, text))\n  };\n\n  const removeAll = () => {\n    dispatch(removeAllTask())\n  }\n\n  const filterTodo = (status) => {\n    switch (status) {\n      case 'completed':\n        return todoList.filter((todo) => todo.isCompleted);\n      case 'notCompleted':\n        return todoList.filter((todo) => !todo.isCompleted);\n      case 'all':\n        return todoList;\n      default:\n        return todoList;\n    }\n  }\n\n  return (\n    <ListWrapper>\n      <Input addTodo={addTodo}/>\n      <FilterBlock>\n        <FilterButton onClick={() => filterTodo('completed')}>Сделано</FilterButton>\n        <FilterButton onClick={() => filterTodo('all')}>Всё</FilterButton>\n        <FilterButton onClick={() => filterTodo('notCompleted')}>Не сделано</FilterButton>\n      </FilterBlock>\n      <TasksList>\n        {todoList.map((item) => (\n          <Task\n            removeTodo={removeTodo}\n            task={item}\n            ChangeValueTodo={ChangeValueTodo}\n            key={item.id}\n          />\n        ))}\n      </TasksList>\n      <RemoveTasksBlock>\n        {todoList.length > 1 ? (\n          <RemoveTasksButton onClick={() => removeAll()}>\n            Удалить всё\n          </RemoveTasksButton>\n        ) : (\n          <div></div>\n        )}\n      </RemoveTasksBlock>\n    </ListWrapper>\n  );\n};\n","import {Title} from \"./components/Title/Title\";\nimport {List} from \"./components/List/List\";\n\nexport const App = () => {\n  return (\n    <div className=\"App\">\n      <Title/>\n      <List/>\n    </div>\n  );\n}\n","import {combineReducers} from \"redux\";\nimport {\n  ADD_TASK,\n  CHANGE_TASK,\n  FILTER_ALL_TASKS,\n  FILTER_IS_COMPLETED_TASKS,\n  REMOVE_ALL_TASKS,\n  REMOVE_TASK\n} from './actions';\n\nconst loadingFromLocalStorage = () => {\n  const localTodo = JSON.parse(localStorage.getItem(\"todoList\"));\n  if (localTodo === null) {\n    return [];\n  } else {\n    return localTodo;\n  }\n};\n\nconst newTodo = (text) => {\n  return {\n    id: new Date().getTime(),\n    date: new Date().toLocaleString(),\n    text,\n    isCompleted: false,\n    change: false,\n  };\n}\n\nexport const todoReducer = (state = {todoList: loadingFromLocalStorage()}, action) => {\n  switch (action.type) {\n\n    case ADD_TASK:\n      return {\n        ...state, todoList: [...state.todoList, newTodo(action.text)]\n      }\n\n    case REMOVE_ALL_TASKS:\n      return {\n        ...state, todoList: []\n      }\n\n    case REMOVE_TASK:\n      return {\n        ...state, todoList: state.todoList.filter((task) => task.id !== action.id)\n      }\n\n    case CHANGE_TASK:\n      return {\n        ...state, todoList: state.todoList.map((task) =>\n          task.id === action.id && action.text\n            ? {...task, [action.value]: !task[action.value], text: action.text}\n            : task.id === action.id\n              ? {...task, [action.value]: !task[action.value]}\n              : {...task}\n        ),\n      }\n\n    case FILTER_ALL_TASKS:\n      return {\n        ...state\n      }\n\n    case FILTER_IS_COMPLETED_TASKS:\n      return {\n        ...state, todoList: state.todoList.filter((task) => task.isCompleted)\n      }\n\n    default:\n      return state\n  }\n}\n\nexport const rootReducer = combineReducers({\n  todoReducer\n});","import {compose, createStore} from 'redux';\nimport {rootReducer} from \"./reducers\";\n\nexport const store = createStore(\n  rootReducer,\n  compose(window.devToolsExtension ? window.devToolsExtension() : (f) => f)\n);","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport {App} from \"./App\";\nimport {Provider} from 'react-redux';\nimport {store} from \"./store/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App/>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}