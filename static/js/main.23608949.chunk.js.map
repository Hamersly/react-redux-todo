{"version":3,"sources":["components/Title/Title.styles.js","components/Title/Title.jsx","components/List/List.styles.js","components/Input/Input.styles.js","components/Input/Input.jsx","components/Task/Task.styles.js","components/Task/Task.jsx","store/types.js","store/actions.js","components/FilterBlock/FilterBlock.styles.jsx","components/FilterBlock/FilterBlock.jsx","components/List/List.jsx","App.js","store/reducers.js","store/rootReducer.js","store/store.js","index.js"],"names":["StyledTitle","styled","h1","Title","props","ListWrapper","div","TasksList","MyButton","button","RemoveTasksButton","RemoveTasksBlock","InputBlock","StyledInput","input","AddButton","Input","addTodo","useState","value","setValue","addTodoInList","trim","length","type","onChange","e","target","onKeyDown","key","placeholder","onClick","TaskWrapper","TaskBlock","TaskChanger","DateBlock","Date","h3","RemoveButton","ChangeButton","Color","SaveButton","TaskText","Completed","ChangeText","textarea","Task","task","removeTodo","ChangeValueTodo","text","date","change","id","defaultValue","wrap","rows","isCompleted","ADD_TASK","REMOVE_ALL_TASKS","REMOVE_TASK","CHANGE_TASK","FILTER_ALL","FILTER_IS_COMPLETED","FILTER_IS_NOT_COMPLETED","filterAll","filterIsCompleted","filterIsNotCompleted","Filters","FilterButton","FilterBlock","flag","useSelector","state","todoReducer","dispatch","useDispatch","List","todos","todoList","sortedList","useEffect","localStorage","clear","setItem","JSON","stringify","removeTask","filterTodo","changeTask","removeAll","addTask","map","item","App","className","initialState","localTodo","parse","getItem","rootReducer","combineReducers","action","todo","getTime","toLocaleString","filter","store","createStore","compose","window","devToolsExtension","f","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.23608949.chunk.js","sourcesContent":["import styled from \"styled-components\";\n\nexport const StyledTitle = styled.h1`\n    font-famili: \"Roboto\", sans-serif;\n    font-weight: 700;\n    font-size: 3rem;\n    text-align: center;\n    margin-top 30px;\n    color: #A9A9A9;\n    text-shadow: 5px 5px 10px black;\n`;\n","import React from \"react\";\nimport {StyledTitle} from \"./Title.styles\";\n\nexport const Title = (props) => {\n  return <StyledTitle>Todo list</StyledTitle>;\n};\n","import styled from \"styled-components\";\n\nexport const ListWrapper = styled.div``;\nexport const TasksList = styled.div``;\n\n\nexport const MyButton = styled.button`\n  padding: 5px 15px;\n  font-size: 20px;\n  background: transparent;\n  background-color: orange;\n  box-shadow: 0 0 10px 2px black;\n  border: none;\n  border-radius: 50px;\n`;\n\n\nexport const RemoveTasksButton = styled(MyButton)`\n  margin-bottom: 30px;\n`;\n\nexport const RemoveTasksBlock = styled.div`\n  display: flex;\n  justify-content: center;\n  margin-top: 30px;\n`;\n","import styled from \"styled-components\";\nimport {MyButton} from \"../List/List.styles\";\n\nexport const InputBlock = styled.div`\n    display: flex;\n    \n`;\n\nexport const StyledInput = styled.input`\n    width: 100%;\n    padding: 10px 15px;\n    margin-top: 30px;\n    border-radius: 30px;\n    box-shadow: 0 0 10px 5px black;\n    outline: none;\n`;\n\nexport const AddButton = styled(MyButton)`\n    margin: 30px auto 0 10px;\n`;\n","import React, {useState} from \"react\";\nimport {AddButton, InputBlock, StyledInput} from \"./Input.styles\";\n\nexport const Input = ({addTodo}) => {\n  const [value, setValue] = useState(\"\");\n\n  const addTodoInList = () => {\n    if (value.trim().length !== 0) {\n      addTodo(value.trim());\n      setValue(\"\");\n    }\n  };\n\n  const handleSubmit = (e) => {\n    if (e.key === \"Enter\") {\n      addTodoInList();\n    }\n  };\n\n  return (\n    <InputBlock>\n      <StyledInput\n        type=\"text\"\n        value={value}\n        onChange={(e) => setValue(e.target.value)}\n        onKeyDown={handleSubmit}\n        placeholder=\"Введи задачу\"\n      />\n      <AddButton onClick={addTodoInList}><h3>+</h3></AddButton>\n    </InputBlock>\n  );\n};\n","import styled from \"styled-components\";\n\nexport const TaskWrapper = styled.div`\n  display: flex;\n  padding: 15px;\n  // margin: 5px 0;\n  justify-content: space-between;\n  align-items: center;\n`;\n\nexport const TaskBlock = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: space-around;\n  margin: 30px 0 0 0;\n  box-shadow: 0 0 10px 5px black;\n  background-color: #a9a9a9;\n  border-radius: 30px;\n`;\n\nexport const TaskChanger = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding: 0 0 15px 0;\n`;\n\nexport const DateBlock = styled.div`\n  display: flex;\n  justify-content: space-between;\n`;\n\nexport const Date = styled.h3`\n  color: orange;\n  margin: 15px 0 5px 15px;\n  width: auto;\n  text-shadow: 1px 1px 2px black;\n`;\n\nexport const RemoveButton = styled.button`\n  background-color: orange;\n  border: none;\n  padding: 5px 10px;\n  margin: 15px 15px 0 0;\n  box-shadow: 0 0 10px 3px black;\n  border-radius: 50px;\n`;\n\nexport const ChangeButton = styled(RemoveButton)`\n  ${(props) => props.Color};\n`;\n\nexport const SaveButton = styled(RemoveButton)`\n  margin: 15px 0 0 0;;\n`;\n\nexport const TaskText = styled.h3`\n  ${(props) => props.Completed};\n  word-break: break-word;\n  hyphens: auto;\n`;\n\nexport const ChangeText = styled.textarea`\n  margin: 15px 15px 0 15px;\n  padding: 5px;\n  background-color: #a9a9a9;\n  width: 95%;\n  color: black;\n  border: none;\n  resize: none;\n`;\n","import React, {useState} from \"react\";\nimport {\n  ChangeButton,\n  ChangeText,\n  Date,\n  DateBlock,\n  RemoveButton,\n  SaveButton,\n  TaskBlock,\n  TaskChanger,\n  TaskText,\n  TaskWrapper,\n} from \"./Task.styles\";\n\nexport const Task = ({\n                       task,\n                       removeTodo,\n                       ChangeValueTodo\n                     }) => {\n  const [value, setValue] = useState(task.text);\n\n  const changeTodo = () => {\n    if (value.trim().length !== 0) {\n      ChangeValueTodo(task.id, 'change', value.trim());\n      setValue(\"\");\n    }\n  };\n\n  return (\n    <TaskBlock>\n      <DateBlock>\n        <Date>{task.date}</Date>\n        <div>\n          {task.change ? (\n            <ChangeButton\n              onClick={() => ChangeValueTodo(task.id, 'change')}\n              Color={\"background-color: red;\"}\n            >\n              ред.\n            </ChangeButton>\n          ) : (\n            <ChangeButton onClick={() => ChangeValueTodo(task.id, 'change')}>\n              ред.\n            </ChangeButton>\n          )}\n\n          <RemoveButton onClick={() => removeTodo(task.id)}>\n            x\n          </RemoveButton>\n        </div>\n      </DateBlock>\n\n      {task.change ? (\n        <TaskChanger>\n          <ChangeText\n            defaultValue={task.text}\n            onChange={(e) => setValue(e.target.value)}\n            type=\"text\"\n            wrap=\"hard\"\n            rows=\"3\"\n          />\n          <SaveButton onClick={changeTodo}>Сохранить</SaveButton>\n        </TaskChanger>\n      ) : (\n        <TaskWrapper onClick={() => ChangeValueTodo(task.id, 'isCompleted')}>\n          {task.isCompleted ? (\n            <TaskText Completed={\"text-decoration: line-through;\"}>\n              {task.text}\n            </TaskText>\n          ) : (\n            <TaskText>{task.text}</TaskText>\n          )}\n        </TaskWrapper>\n      )}\n    </TaskBlock>\n  );\n};\n","export const ADD_TASK = 'ADD_TASK'\nexport const REMOVE_ALL_TASKS = 'REMOVE_ALL_TASKS'\nexport const REMOVE_TASK = 'REMOVE_TASK'\nexport const CHANGE_TASK = 'CHANGE_TASK'\nexport const FILTER_ALL = 'FILTER_ALL'\nexport const FILTER_IS_COMPLETED = 'FILTER_IS_COMPLETED'\nexport const FILTER_IS_NOT_COMPLETED = 'FILTER_IS_NOT_COMPLETED'","import {\n  ADD_TASK,\n  CHANGE_TASK,\n  FILTER_ALL,\n  FILTER_IS_COMPLETED,\n  FILTER_IS_NOT_COMPLETED,\n  REMOVE_ALL_TASKS,\n  REMOVE_TASK\n} from \"./types\";\n\nexport const addTask = (text) => ({\n  type: ADD_TASK,\n  text,\n});\n\nexport const changeTask = (id, value, text) => ({\n  type: CHANGE_TASK,\n  id,\n  value,\n  text\n})\n\nexport const removeTask = (id) => ({\n  type: REMOVE_TASK,\n  id\n})\n\nexport const removeAllTask = () => ({\n  type: REMOVE_ALL_TASKS\n})\n\nexport const filterAll = () => ({\n  type: FILTER_ALL\n})\n\nexport const filterIsCompleted = () => ({\n  type: FILTER_IS_COMPLETED\n})\n\nexport const filterIsNotCompleted = () => ({\n  type: FILTER_IS_NOT_COMPLETED\n})\n\n","import styled from \"styled-components\";\nimport {MyButton} from \"../List/List.styles\";\n\nexport const Filters = styled.div`\n  display: flex;\n  justify-content: center;\n`;\n\nexport const FilterButton = styled(MyButton)`\n  margin: 30px 30px 0 10px;\n  ${(props) => props.Color};\n`;","import React from \"react\";\nimport {filterAll, filterIsCompleted, filterIsNotCompleted} from \"../../store/actions\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {FilterButton, Filters} from \"./FilterBlock.styles\";\n\nexport const FilterBlock = (props) => {\n  const flag = useSelector((state) => state.todoReducer.flag)\n  const dispatch = useDispatch()\n\n  return (\n    <Filters>\n      {flag === \"FILTER_IS_COMPLETED\" ?\n        <FilterButton\n          onClick={() => dispatch(filterIsCompleted())}\n          Color={\"background-color: red;\"}>\n          Сделано\n        </FilterButton> :\n        <FilterButton onClick={() => dispatch(filterIsCompleted())}>\n          Сделано\n        </FilterButton>\n      }\n\n      {flag === \"FILTER_ALL\" ?\n        <FilterButton\n          onClick={() => dispatch(filterAll())}\n          Color={\"background-color: red;\"}>\n          Всё\n        </FilterButton> :\n        <FilterButton\n          onClick={() => dispatch(filterAll())}>\n          Всё\n        </FilterButton>\n      }\n\n      {flag === \"FILTER_IS_NOT_COMPLETED\" ?\n        <FilterButton\n          onClick={() => dispatch(filterIsNotCompleted())}\n          Color={\"background-color: red;\"}>\n          Ожидает\n        </FilterButton> :\n        <FilterButton\n          onClick={() => dispatch(filterIsNotCompleted())}>\n          Ожидает\n        </FilterButton>\n      }\n    </Filters>\n  )\n};","import React, {useEffect} from \"react\";\nimport {ListWrapper, RemoveTasksBlock, RemoveTasksButton, TasksList} from \"./List.styles\";\nimport {Input} from \"../Input/Input\";\nimport {Task} from \"../Task/Task\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {\n  addTask,\n  changeTask,\n  filterAll,\n  filterIsCompleted,\n  filterIsNotCompleted,\n  removeAllTask,\n  removeTask\n} from \"../../store/actions\";\nimport {FilterBlock} from \"../FilterBlock/FilterBlock\";\n\nexport const List = () => {\n  const todos = useSelector((state) => state.todoReducer)\n  const todoList = todos.sortedList\n  const flag = todos.flag\n  const dispatch = useDispatch()\n\n  useEffect(() => {\n    localStorage.clear();\n    localStorage.setItem(\"todos\", JSON.stringify(todos));\n  });\n\n  const addTodo = (text) => {\n    dispatch(addTask(text))\n    filterTodo()\n  };\n\n  const removeTodo = (id) => {\n    dispatch(removeTask(id))\n    filterTodo()\n  };\n\n  const ChangeValueTodo = (id, value, text) => {\n    dispatch(changeTask(id, value, text))\n    filterTodo()\n  };\n\n  const removeAll = () => {\n    dispatch(removeAllTask())\n  }\n\n  const filterTodo = () => {\n    switch (flag) {\n      case \"FILTER_ALL\":\n        return dispatch(filterAll())\n      case \"FILTER_IS_COMPLETED\":\n        return dispatch(filterIsCompleted())\n      case \"FILTER_IS_NOT_COMPLETED\":\n        return dispatch(filterIsNotCompleted())\n      default:\n        return dispatch(filterAll())\n    }\n  }\n\n  return (\n    <ListWrapper>\n      <Input addTodo={addTodo}/>\n      <FilterBlock></FilterBlock>\n      <TasksList>\n        {todoList.map((item) => (\n          <Task\n            removeTodo={removeTodo}\n            task={item}\n            ChangeValueTodo={ChangeValueTodo}\n            key={item.id}\n          />\n        ))}\n      </TasksList>\n      <RemoveTasksBlock>\n        {todoList.length > 1 ? (\n          <RemoveTasksButton onClick={() => removeAll()}>\n            Удалить всё\n          </RemoveTasksButton>\n        ) : (\n          <div></div>\n        )}\n      </RemoveTasksBlock>\n    </ListWrapper>\n  );\n};\n","import {Title} from \"./components/Title/Title\";\nimport {List} from \"./components/List/List\";\n\nexport const App = () => {\n  return (\n    <div className=\"App\">\n      <Title/>\n      <List/>\n    </div>\n  );\n}\n","import {\n  ADD_TASK,\n  CHANGE_TASK,\n  FILTER_ALL,\n  FILTER_IS_COMPLETED,\n  FILTER_IS_NOT_COMPLETED,\n  REMOVE_ALL_TASKS,\n  REMOVE_TASK\n} from './types';\n\nconst initialState = () => {\n  const localTodo = JSON.parse(localStorage.getItem(\"todos\"));\n  if (localTodo === null) {\n    return {\n      todoList: [],\n      sortedList: [],\n      flag: FILTER_ALL\n    };\n  } else {\n    return localTodo;\n  }\n};\n\nexport const todoReducer = (state = initialState(), action) => {\n  switch (action.type) {\n    case ADD_TASK:\n      const todo = {\n        id: new Date().getTime(),\n        date: new Date().toLocaleString(),\n        text: action.text,\n        isCompleted: false,\n        change: false,\n      }\n      return {\n        ...state,\n        todoList: [...state.todoList, todo]\n      }\n\n    case REMOVE_ALL_TASKS:\n      return {\n        ...state,\n        todoList: [],\n        sortedList: [],\n      }\n\n    case REMOVE_TASK:\n      return {\n        ...state,\n        todoList: state.todoList.filter((task) => task.id !== action.id)\n      }\n\n    case CHANGE_TASK:\n      return {\n        ...state,\n        todoList: state.todoList.map((task) =>\n          task.id === action.id && action.text\n            ? {...task, [action.value]: !task[action.value], text: action.text}\n            : task.id === action.id\n              ? {...task, [action.value]: !task[action.value]}\n              : {...task})\n      }\n\n    case FILTER_ALL:\n      return {\n        ...state,\n        sortedList: state.todoList,\n        flag: action.type\n      }\n\n    case FILTER_IS_COMPLETED:\n      return {\n        ...state,\n        sortedList: state.todoList.filter((task) => task.isCompleted),\n        flag: action.type\n      }\n\n    case FILTER_IS_NOT_COMPLETED:\n      return {\n        ...state,\n        sortedList: state.todoList.filter((task) => !task.isCompleted),\n        flag: action.type\n      }\n\n    default:\n      return state\n  }\n}\n\n","import {combineReducers} from \"redux\";\nimport {todoReducer} from \"./reducers\";\n\nexport const rootReducer = combineReducers({\n  todoReducer,\n});","import {compose, createStore} from 'redux';\nimport {rootReducer} from \"./rootReducer\";\n\nexport const store = createStore(\n  rootReducer,\n  compose(window.devToolsExtension ? window.devToolsExtension() : (f) => f)\n);","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport {App} from \"./App\";\nimport {Provider} from 'react-redux';\nimport {store} from \"./store/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App/>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}